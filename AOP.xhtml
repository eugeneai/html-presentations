<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE html
PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"
[
<!ENTITY PRESTITLE "Аспект-ориентированное программирование">
]
>
<html lang="ru" xmlns="http://www.w3.org/1999/xhtml">
    <head>
        <title>&PRESTITLE;</title>
        <meta charset="utf-8"/>
        <meta http-equiv="x-ua-compatible" content="ie=edge"/>
        <meta name="viewport" content="width=device-width, initial-scale=1"/>
        <script type="text/x-mathjax-config">
         MathJax.Hub.Config({
             "tex2jax": {inlineMath: [['$','$'], ['\\(','\\)']]},
             "CommonHTML": {
                 "preferredFont": "STIX"
             }
         });
        </script>
        <script type="text/javascript" async="async"
                src="node_modules/mathjax/MathJax.js?config=TeX-MML-AM_CHTML">
        </script>
        <link rel="stylesheet" href="node_modules/shower-ribbon/styles/screen-16x10.css"/>
        <link rel="stylesheet" href="eugeneai/local.css"/>
        <style>
         .differ {
             color:blue;
         }
         .task-def {
             color:saddlebrown;
         }
         .description {
             line-height: 120%;
         }
         .description dt {
             margin-top: 1em;
             margin-left:-50px;
         }
         .description dd {
             margin-left: 0px;
         }
        </style>

    </head>
    <body class="shower list">

        <header class="caption">
            <h1>&PRESTITLE;</h1>
            <p>
                к.т.н. Черкашин Е.А., ИДСТУ СО РАН
            </p>
            <p>
                Презентация подготовлена при помощи системы
                <a href="https://github.com/shower/shower">Shower</a>
                (<a href="https://github.com/shower/shower/wiki">Страница
                    Wiki</a>).
            </p>
	    </header>

	    <section class="slide black cover" id="cover">
		    <h2>&PRESTITLE;</h2>
            <p class="place b r">
                к.т.н. <a href="mailto:eugeneai@irnok.net">
                Черкашин Е.А.
                </a>,<br/>
                лаб. 4.1. <a href="http://www.idstu.irk.ru/ru/orgsection/35" class="external" >
                    Комплексных информационных систем</a><br/>
                ИДСТУ СО РАН
            </p>
		    <style>
			 #cover h2 {
				 margin:30px 0 0;
				 color:#FFF;
				 text-align:center;
				 font-size:70px;
			 }
			 #cover p {
				 margin:10px 0 0;
				 text-align:right;
				 color:#FFF;
				 font-style:italic;
				 font-size:20px;
			 }
			 #cover p a {
				 color:#FFF;
			 }
		    </style>
	    </section>

	    <section class="slide">
		    <h2>Фрагмент кода C# (1)</h2>
            <pre>
                <code>public class InvoiceService {
    . . . . .
	void CreateInvoice(ShoppingCart cart) {
		<mark>_transaction.Start();</mark>
		_invoicedb.CreateNewInvoice();
		foreach(item in cart)
			_invoicedb.AddItem(item);
		_invoicedb.ProcessSalesTax();
		<mark>_transaction.Commit();</mark>
		}
}
                </code>
            </pre>
	    </section>

	    <section class="slide">
		    <h2>Фрагмент кода C# (2)</h2>
            <pre>
                <code>		<mark>_transaction.Start();</mark>
		_invoicedb.CreateNewInvoice();
		<mark>_logger.LogInfo("Started Sales Tax Processing");</mark>
		foreach(item in cart)
			_invoicedb.AddItem(item);
			_invoicedb.ProcessSalesTax();
			<mark>_transaction.Commit();</mark>
		<mark>_logger.LogInfo("Finised Sales Tax Processing");</mark>
                </code>
            </pre>
	    </section>

	    <section class="slide">
		    <h2>Фрагмент кода C# (3)</h2>
            <pre>
                <code>		<mark>_userPermissions.CheckFor("tax-processing");</mark>
		<mark>_transaction.Start();</mark>
		_invoicedb.CreateNewInvoice();
		<mark>_logger.LogInfo("Started Sales Tax Processing");</mark>
		foreach(item in cart)
			_invoicedb.AddItem(item);
			_invoicedb.ProcessSalesTax();
			<mark>_transaction.Commit();</mark>
		<mark>_logger.LogInfo("Finised Sales Tax Processing");</mark>
                </code>
            </pre>
	    </section>

        <section class="slide">
            <h2>Проблемы сквозного кода</h2>
            <p class="place c">
                <ul>
                    <li>Программа сложна для понимания
                        <ul>
                            <li>Запутанность кода,</li>
                            <li>Рассредоточение кода,</li>
                            <li>Плохое прослеживание назначения;</li>
                        </ul>
                    </li>
                    <li>Непригодность для повторного использования;</li>
                    <li>Большая вероятность ошибок;</li>
                    <li>Трудоемкость сопровождения.</li>
                </ul>
            </p>
        </section>
	    <section class="slide">
		    <h2>История технологии</h2>
            <p>
		        <ol>
			        <li>1997 - Разработано в PARC, a Xerox Company;</li>
			        <li>2001 - AOP в Java - AspectJ;</li>
			        <li>2003 - <strong>Распространение в другие системы программирования</strong>.</li>
                </ol>
                <strong>Технологии - сателлиты</strong>
                <ol>
			        <li>Dependency Inversion - обратные зависимости;</li>
			        <li>Python, D ... - декораторы;</li>
			        <li>SmallTalk, LogTalk - перехват сообщений.</li>
		        </ol>
            </p>
		    <p class="note">AOP - Aspect-oriented programming.
                <br/>
                PARC - Palo Alto Research Center <a href="https://www.parc.com/" class="external">WEB-site</a>.
            </p>
	    </section>

	    <section class="slide">
		    <h2>Определения</h2>
		    <p>
                <strong>Функциональные требования</strong> - требования, "имеющие ценность в проекте", т.е. функции разрабатываемой системы, решающие конкретную поставленную задачу обработки информации.
                <!-- <br/>Примеры - модель предметной области (бизнес-логика), представление объектов в интерфейсе пользователя, хранение объектов в хранилище данных. -->
                <br/>
                <strong>Нефункциональные требования</strong> не имеют прямого отношения к решаемой задаче, но должны быть выполнены, чтобы обеспечить корректное функционирование системы, создать среду для ее сопровождения.
                <!-- <br/>Примеры - журналирование, обеспечение безопасности, производительность системы, транзакции и т.п.
                   --><br/>
                <img src="./pictures/requirements-matrix.svg" class="place c b" style="margin-bottom:30px;"/>
            </p>
        </section>
        <section class="slide">
            <h2>Примеры нефункциональных задач</h2>
            <ul class="double">
                <li>Cинхронизация;</li>
                <li>Проверка ограничений;</li>
                <li>Отлов ошибок и их коррекция;</li>
                <li>Зависимости между функциями;</li>
                <li>Управление памятью;</li>
                <li>Проверка структур данных;</li>
                <li>Хранение объектов;</li>
                <li>Обработка транзакций;</li>
                <li>Перевод сообщений, локализация;</li>
                <li>Защита информации;</li>
                <li>Кэширование данных;</li>
                <li>Ведение журнала событий;</li>
                <li>Мониторинг событий/состояния;</li>
                <li>Правила предметной области (bussiness logics);</li>
                <li>Миграция кода;</li>
                <li>Оптимизация алгоритмов;</li>
                <li class="differ">Контрольные точки;</li>
                <li class="differ">Точки сохранения/восстановления состояния.</li>
            </ul>
        </section>
	    <section class="slide">
		    <h2>Определения</h2>
		    <p>
                <strong>Сквозные задачи (cross-cutting concern)</strong> - однотипные задачи, решаемые в разных частях программной системы.
            </p>
            <p class="double">
                <strong>Спутывание (tangling, переплетение)</strong> - "стиль" программирования, где несколько функций реализуются в одном коде одновременно.
                <br/>
                <strong>Разбрасывание (scattering)</strong> - распределение решения задачи между отдельными процедурами (C-c,C-v).
                <br/>
                <br/>
                <br/>
                <br/>
                <br/>
                <br/>
                <br/>
                <br/>
            </p>
            <div class="place r b" style="margin-bottom:50px;">
                <img src="./pictures/cross-cutting-concerns-bad.svg"/>
                <!-- <img src="./pictures/cross-cutting-concerns.svg"/> -->
            </div>
        </section>

	    <section class="slide">
		    <h2>Определения</h2>
            <p>
                <strong>Сплетение (weawing)</strong> - процесс порождения спутанного кода в соответствии с <span class="differ">рекомендациями</span>.
                <br/>
                <strong>Внедрение (introduction)</strong> - Изменение структуры класса или иерархии наследования с целью реализации <span class="differ">аспекта</span>.
                <br/>
            </p>
            <div class="place c b" style="margin-bottom:50px;">
                <img src="./pictures/cross-cutting-concerns-good.svg"/>
            </div>
        </section>

	    <section class="slide">
		    <h2>Определения</h2>
		    <p class="double">
                <strong>Точка соединения (join point)</strong> - точка между операторами в коде программы или этапами исполнения некоторой процедуры.
                <br/>
                <strong>Срез (pointcut)</strong> - множество точек соединения, определенное перечислением или ограничением; место, куда встраивается advice.
                <br/>
                <br/>
                <br/>
                <br/>
                <br/>
                <br/>
                <br/>
                <br/>
            </p>
            <img src="./pictures/join-point-block-diagram.svg" class="place r b" style="width: 50%; height: auto; margin-bottom:70px;"/>
        </section>

	    <section class="slide">
		    <h2>Определения</h2>
		    <p class="double">
                <strong>Рекомендация (advice)</strong> - конкретный код, который выполняет заданную работу в заданном месте.
                <br/>
                <strong>Аспект (aspect)</strong> - экземпляр программного кода для конкретной <span class="differ">точки соединения</span> (<span class="differ">среза</span>).
                <br/>
                <br/>
                <br/>
                <br/>
                <br/>
                <br/>
            </p>
            <img src="./pictures/join-point-block-diagram-around.svg" class="place r b" style="width: 50%; height: auto; margin-bottom:30px;"/>
	    </section>

	    <section class="slide">
		    <h2>Пример аспекта AspectJ - журналирование</h2>
		    <pre>
                <code>public <mark>aspect</mark> AutoLog {
  <mark>pointcut pubMethods(): execution(public * org.cactus..*(..));</mark>
  <mark>pointcut logObjectCalls(): execution(* Logger.*(..));</mark>
  <mark>pointcut loggableCalls(): pubMethods() &amp;&amp; !logObjectCalls()</mark>
  before(): <mark>loggableCalls()</mark> {
    Logger.entry(thisJoinPoint.getSignature().toString()); }
  after(): <mark>loggableCalls()</mark> {
    Logger.exit(thisJoinPoint.getSignature().toString()); }
}</code>
		    </pre>
	    </section>

        <section class="slide">
            <h2>Точки соединения AspectJ (joint points)</h2>
        <p class="double">
            <ul>
                <li>Вызовы методов;</li>
                <li>Обращение к членам класса;</li>
                <li>Блоки обработки исключений и др.;</li>
                <li><span class="differ">Другие точки соединения;</span> например, результат выполнения метода передается другому методу.</li>
            </ul>
        </p>
        <pre>
            <code>void <mark>around(): call(public void Hello.say())</mark> {
	if (Math.random() > .5) {
		<mark>proceed();</mark>     //go ahead with the method call
	} else {
		System.out.println("Fate is not on your side.");
	}}</code>
        </pre>
        </section>

	    <section class="slide">
		    <h2>Сателлит 1 - Инверсия зависимости (DI)</h2>
            <pre>
                <code>public class InvoiceService {
    . . . . . .
    InvoiceService(<mark class="important">IInvoiceData</mark> invoicedb,
           <mark class="important">ITransactionManagementService</mark> transaction) {
          <mark>_invoicedb = invoicedb; _transaction = transaction;</mark>}
	void CreateInvoice(ShoppingCart cart) {
		<mark>_transaction.Start();</mark>
		<mark>_invoicedb.CreateInvoice(cart);</mark>
		<mark>_transaction.Commit();</mark>
		} }
                </code>
            </pre>
	    </section>

        <section class="slide">
            <h2>Сателлит 2 - Декораторы</h2>
            <pre>
                <code>public class TransactionDecorator: <mark>IInvoiceData</mark> {
    <mark>IInvoiceData</mark> <mark class="important">_realService</mark>;
    ITransactionManagementService _transaction;
    public TransactionDecorator(IInvoiceData svc,
        ITransactionManagementService trans) {
            <mark class="important">_realService</mark> = svc; _transaction = trans;}
    public void <mark>CreateInvoice</mark>(ShoppingCart cart) {
        _transaction.Start();
        <mark class="important">_realService</mark>.<mark>CreateInvoice</mark>(cart);
        _transaction.End(); } }
                </code>
            </pre>
        </section>

	    <section class="slide">
		    <h2>Декораторы Python (flask)</h2>
            <pre>
                <code class="double"><mark>@app.route</mark>('/')
<mark>@templated</mark>('index.html')
def index():
    return dict(value=42)

<mark>@app.route</mark>('/user.html')
<mark>@templated</mark>()
<mark>@memcached</mark>(sec=20)
def index():
    return dict(value=42)

<mark>@app.route</mark>('/secret_page')
<mark>@templated</mark>('login.html')
<mark class="important">@login_required</mark>
def secret_page():
    return dict(msg=
        'Please, login')
<!-- Не удалять эти пустые строки: верстка -->



                </code>
            </pre>
	    </section>

	    <section class="slide">
		    <h2>Декораторы - Lisp</h2>
            <pre>
                <code>(defun <mark>attributes</mark> (keywords <mark>function</mark>)
  (loop for (key value) in keywords
        do (setf (get <mark>function</mark> key) value))
  <mark>function</mark>)
(<mark>attributes</mark> '((version-added "2.2")
    (author "Rainer Joswig"))

<mark>(defun add-func (a b)
  (+ a b))</mark>
)</code>
            </pre>
	    </section>

	    <section class="slide">
		    <h2>Сателлит 3 - Перехват методов (SmallTalk)</h2>
            <pre>
                <code>
                </code>
            </pre>
	    </section>

	    <section class="slide">
		    <h2>Сателлит 3 - Перехват методов (LagTalk)</h2>
            <pre>
                <code>:- object(<mark>tracer</mark>,
    implements(monitoring)). % Протокол обработчиков сообщений.
    <mark>before</mark>(Object, Message, Sender) :-
        write('call: '), writeq(Object), write(' &lt;-- '),
        writeq(Message), write(' from '), writeq(Sender), nl.
    <mark>after</mark>(Object, Message, Sender) :-
        write('exit: '), writeq(Object), write(' &lt;-- '),
         writeq(Message), write(' from '), writeq(Sender), nl.
:- end_object.
                </code>
            </pre>
	    </section>

	    <section class="slide">
		    <h2>Сателлит 3 - Перехват методов (LagTalk)</h2>
            <pre>
                <code class="double">:- object(any).
    :- public(msg/1) .
    :- public(gsm/1) .
    <mark>msg(ok)</mark>.
    <mark>gsm(no)</mark>.
:- end_object.

| ?- define_events(_, _, _, _,
       <mark>tracer</mark>).
yes

| ?- <mark>any::bar(X)</mark>.

call: any &lt;-- <mark>msg(X)</mark>
 from user
exit: any &lt;-- <mark>msg(ok)</mark>
 from user
X = ok
yes
                </code>
            </pre>
	    </section>

	    <section class="slide">
		    <h2 class="shout shrink">You can even shout this way</h2>
	    </section>

	    <section class="slide">
		    <h2>Inner navigation</h2>
		    <ol>
			    <li>Lets you reveal list items one by one</li>
			    <li class="next">To keep some key points</li>
			    <li class="next">In secret from audience</li>
			    <li class="next">But it will work only once</li>
			    <li class="next">Nobody wants to see the same joke twice</li>
		    </ol>
	    </section>

	    <section class="slide grid">
		    <h2>All nicely aligned to grid</h2>
	    </section>

	    <section class="slide" id="see-more">
		    <h2 class="shout">
			    <img src="pictures/logo.svg" alt="Shower logo"/>
			    <a href="https://github.com/shower/shower">See more on GitHub</a>
		    </h2>
		    <style>
			 #see-more h2 {
				 font-size:100px
			 }
			 #see-more img {
				 width:0.72em;
				 height:0.72em;
			 }
		    </style>
	    </section>

	    <footer class="badge">
		    <a href="https://github.com/shower/shower">Fork me on GitHub</a>
	    </footer>

	    <div class="progress"></div>

	    <script src="node_modules/shower-core/shower.min.js"></script>
	    <!-- Copyright © 2017 Yours Truly, Famous Inc. -->

    </body>
</html>
